name: Build OnePlus_13r
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "Branch"
        required: true
        default: 'sm8650_v_15.0.0_oneplus_ace5'
      FEIL:
        description: "Configuration File"
        required: true
        default: 'oneplus_13r'
      CPUD:
        description: "Processor Codename"
        required: true
        default: 'pineapple'
      ANDROID_VERSION:
        description: "Android Kernel Version"
        required: true
        default: 'android14'
      KERNEL_VERSION:
        description: "Kernel Version"
        required: true
        default: '6.1'
      KERNEL_NAME:
        description: "Modify Kernel Name"
        required: true
        default: '-android14-11-o-g1132d864665d'
      kernelsu_variant:
        description: "Select KSU Variant"
        required: true
        type: choice
        options:
          - SukiSU
          - SukiSU-Ultra
        default: 'SukiSU-Ultra'
      kernelsu_version:
        description: "Select KSU Version"
        required: true
        type: choice
        options:
          - tag
          - main
        default: 'main'
      SUSFS_ENABLED:
        description: "Enable SUSFS"
        required: true
        type: boolean
        default: true
      VFS_patch_ENABLED:
        description: "Enable VFS Patch (New Hooks)?"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: 'enable'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initialize Log Directory
        run: |
          mkdir -p logs
          echo "Log directory initialized at $(date) in $(pwd)" > logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Initialize Log Files
        run: |
          mkdir -p logs
          touch logs/clang_clone.log logs/dir_structure.log logs/oneplus_config.log logs/repo_version.log logs/log_summary.log
          echo "Log files initialized: $(ls -la logs)" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 16384
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Cache Clang Toolchain
        id: cache-clang
        uses: actions/cache@v4
        with:
          path: ~/clang-r522817
          key: clang-r522817-${{ runner.os }}
          restore-keys: clang-r522817-${{ runner.os }}-
          save-always: true  # Temporary for debugging

      - name: Clone Clang Toolchain
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          mkdir -p logs
          mkdir -p ~/clang-r522817
          git clone --depth=1 https://gitlab.com/kei-space/clang/r522817.git ~/clang-r522817 || { echo "Error: Clang clone failed" >> logs/clang_clone.log; exit 1; }
          echo "Clang toolchain cloned successfully" >> logs/clang_clone.log
          echo "Clang clone completed: $(ls -la ~/clang-r522817)" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log

      - name: Copy Clang to Workspace
        run: |
          mkdir -p logs
          mkdir -p kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86
          cp -r ~/clang-r522817 kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r522817
          echo "Clang copied to workspace: $(ls -la kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86)" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Configure Git
        run: |
          mkdir -p logs
          git config --global user.name "OplusKernelBuilder"
          git config --global user.email "builder@opluskernel.org"
          echo "Git configured" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log

      - name: Install Dependencies
        run: |
          mkdir -p logs
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl
          echo "Dependencies installed" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log

      - name: Install Repo Tool
        run: |
          mkdir -p logs
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          export PATH=/usr/local/bin:$PATH
          repo --version > logs/repo_version.log
          echo "Repo tool installed: $(repo --version)" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log

      - name: Clone Kernel Repository
        run: |
          mkdir -p logs
          mkdir -p kernel_workspace/kernel_platform
          echo "Checking kernel repository availability:" > logs/dir_structure.log
          git ls-remote https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650 oneplus/sm8650_v_15.0.0_oneplus_ace5 >> logs/dir_structure.log || echo "Error: Branch oneplus/sm8650_v_15.0.0_oneplus_ace5 not found" >> logs/dir_structure.log
          git clone --depth=1 -b oneplus/sm8650_v_15.0.0_oneplus_ace5 https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650 kernel_workspace/kernel_platform/common 2>&1 | tee -a logs/dir_structure.log || { echo "Error: Failed to clone kernel repository" >> logs/dir_structure.log; exit 1; }
          if [ ! -d "kernel_workspace/kernel_platform/common" ]; then
            echo "Error: kernel_platform/common directory not found after cloning" >> logs/dir_structure.log
            ls -la kernel_workspace/kernel_platform >> logs/dir_structure.log
            exit 1
          fi
          if [ ! -f "kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig" ]; then
            echo "Error: gki_defconfig not found in kernel_platform/common/arch/arm64/configs/" >> logs/dir_structure.log
            ls -la kernel_workspace/kernel_platform/common/arch/arm64/configs/ || echo "configs directory not found" >> logs/dir_structure.log
            exit 1
          fi
          if [ ! -d "kernel_workspace/kernel_platform/msm-kernel" ]; then
            echo "Warning: kernel_platform/msm-kernel directory not found, creating empty directory" >> logs/dir_structure.log
            mkdir -p kernel_workspace/kernel_platform/msm-kernel
          fi
          rm kernel_workspace/kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!" >> logs/dir_structure.log
          rm kernel_workspace/kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!" >> logs/dir_structure.log
          sed -i 's/ -dirty//g' kernel_workspace/kernel_platform/common/scripts/setlocalversion || echo "No setlocalversion script in common" >> logs/dir_structure.log
          sed -i 's/ -dirty//g' kernel_workspace/kernel_platform/msm-kernel/scripts/setlocalversion || echo "No setlocalversion script in msm-kernel" >> logs/dir_structure.log
          sed -i 's/ -dirty//g' kernel_workspace/kernel_platform/external/dtc/scripts/setlocalversion || echo "No setlocalversion script in dtc" >> logs/dir_structure.log
          echo "Kernel repository cloned" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la kernel_workspace/kernel_platform)" >> logs/log_summary.log

      - name: OnePlus
        run: |
          mkdir -p logs
          if [ ! -d "kernel_workspace/kernel_platform/common" ]; then
            echo "Error: kernel_workspace/kernel_platform/common directory not found" >> logs/oneplus_config.log
            ls -la kernel_workspace/kernel_platform || echo "kernel_platform directory not found" >> logs/oneplus_config.log
            ls -la kernel_workspace || echo "kernel_workspace directory not found" >> logs/oneplus_config.log
            exit 1
          fi
          cd kernel_workspace/kernel_platform/common
          chmod 644 arch/arm64/configs/gki_defconfig
          echo "Current gki_defconfig content around line 67:" >> logs/oneplus_config.log
          sed -n '60,75p' arch/arm64/configs/gki_defconfig >> logs/oneplus_config.log
          sed -i 's/CONFIG_CMDLINE="\(.*\)"/CONFIG_CMDLINE="\1 module_blacklist=oplus_network_app_monitor,oplus_network_linkpower_module,oplus_network_vnet,oplus_network_score,oplus_network_qr_scan,oplus_network_game_first,oplus_network_sched,oplus_network_snapshot,oplus_network_tuning,oplus_network_data_module,oplus_network_stats_calc,oplus_network_dns_hook,oplus_connectivity_routerboost,oplus_connectivity_sla"/' arch/arm64/configs/gki_defconfig
          echo "Updated gki_defconfig content around line 67:" >> logs/oneplus_config.log
          sed -n '50,100p' arch/arm64/configs/gki_defconfig >> logs/oneplus_config.log
          if ! grep -q 'module_blacklist=oplus_network_app_monitor' arch/arm64/configs/gki_defconfig; then
            echo "Error: Failed to apply module_blacklist to CONFIG_CMDLINE" >> logs/oneplus_config.log
            cat logs/oneplus_config.log
            exit 1
          fi
          echo "oplus applied" >> logs/oneplus_config.log
          echo "OnePlus config completed" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Configure SukiSU-Ultra & SukiSU Version
        if: ${{ github.event.inputs.kernelsu_variant == 'SukiSU-Ultra' || github.event.inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          mkdir -p logs
          if [[ "${{ github.event.inputs.kernelsu_version }}" == "tag" ]]; then
            echo "BRANCH=-" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.kernelsu_version }}" == "main" ]]; then
            echo "BRANCH=-s susfs-dev" >> $GITHUB_ENV
          fi
          echo "SukiSU version configured: ${{ github.event.inputs.kernelsu_version }}" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log

      - name: Add SukiSU-Ultra
        if: ${{ github.event.inputs.kernelsu_variant == 'SukiSU-Ultra' }}
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "SukiSU-Ultra added, version: $KSU_VERSION" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Add SukiSU
        if: ${{ github.event.inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=16/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "SukiSU added, version: $KSU_VERSION" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Apply SUSFS Patches for SukiSU
        if: ${{ github.event.inputs.SUSFS_ENABLED == 'true' }}
        run: |
          mkdir -p logs
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          echo "Applying SUSFS patches to the kernel" >> logs/log_summary.log
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          echo "SUSFS patches applied" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Apply Hide Stuff Patches
        if: ${{ github.event.inputs.SUSFS_ENABLED == 'true' }}
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform/common
          #cp ../../SukiSU_patch/69_hide_stuff.patch ./
          #echo "Applying hide app patch" >> logs/log_summary.log
          #patch -p1 -F 3 < 69_hide_stuff.patch
          echo "Hide stuff patches skipped (commented out)" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Apply New Hooks Patches
        if: ${{ github.event.inputs.VFS_patch_ENABLED == 'enable' }}
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Applying VFS patch" >> logs/log_summary.log
          patch -p1 -F 3 < syscall_hooks.patch
          echo "VFS patches applied" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Add SUSFS Configuration Settings
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ "${{ github.event.inputs.kernelsu_variant }}" == "SukiSU-Ultra" ]]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [[ "${{ github.event.inputs.VFS_patch_ENABLED }}" == "enable" ]]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_WIREGUARD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEBUG_KERNEL=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DYNAMIC_DEBUG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEBUG_INFO=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_CDG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_CDG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_DEFAULT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_HTB=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_PRIO=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_SFQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_TBF=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IPV6_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          echo "SUSFS config settings added" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Add Make Name
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform
          if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" || "${{ github.event.inputs.KERNEL_VERSION }}" == "6.6" ]]; then
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi
          sed -i '$s|echo "\$res"|echo "\${{ github.event.inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion
          echo "Kernel name modified" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Build Kernel
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform
          tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          echo "Kernel build completed" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Generate Kernel Images
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform/dist
          cp Image Image_original
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          mv oImage Image_kpm
          mv Image_original Image
          echo "Kernel images generated" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Prepare AnyKernel3 Packages
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-no_kpm --depth=1
          git clone https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-kpm --depth=1
          rm -rf AnyKernel3-{kpm,no_kpm}/.git
          rm -f AnyKernel3-{kpm,no_kpm}/push.sh
          echo "AnyKernel3 packages prepared" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Copy Images to Corresponding Directories and Rename to Image
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform/dist
          cp Image AnyKernel3-no_kpm/Image
          cp Image_kpm AnyKernel3-kpm/Image
          echo "Kernel images copied to AnyKernel3" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Create Zip Packages (Preserve AnyKernel3 Folder Structure)
        run: |
          mkdir -p logs
          cd kernel_workspace/kernel_platform/dist
          cd AnyKernel3-no_kpm && zip -r ../AnyKernel3-no_kpm_${{ env.KSUVER }}_13r.zip . && cd ..
          cd AnyKernel3-kpm && zip -r ../AnyKernel3-kpm_${{ env.KSUVER }}_13r.zip . && cd ..
          echo "Zip packages created" >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Verify Log Files
        run: |
          mkdir -p logs
          echo "Listing log files before upload:" >> logs/log_summary.log
          ls -la logs/*.log >> logs/log_summary.log
          echo "Log file sizes:" >> logs/log_summary.log
          find logs -name "*.log" -exec wc -c {} \; >> logs/log_summary.log
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Debug Cache Path
        run: |
          mkdir -p logs
          echo "Checking cache path before cleanup:" >> logs/log_summary.log
          if [ -d "~/clang-r522817" ]; then
            echo "Clang cache path exists: $(ls -la ~/clang-r522817)" >> logs/log_summary.log
          else
            echo "Clang cache path does not exist: ~/clang-r522817" >> logs/log_summary.log
          fi
          echo "Current working directory: $(pwd)" >> logs/log_summary.log
          echo "Directory contents: $(ls -la)" >> logs/log_summary.log

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: |
            kernel_workspace/kernel_platform/dist/AnyKernel3-no_kpm_${{ env.KSUVER }}_13r.zip
            kernel_workspace/kernel_platform/dist/AnyKernel3-kpm_${{ env.KSUVER }}_13r.zip
          if-no-files-found: warn

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs/*.log
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
